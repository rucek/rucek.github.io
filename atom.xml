<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacek Kunicki]]></title>
  <link href="http://rucek.github.io/atom.xml" rel="self"/>
  <link href="http://rucek.github.io/"/>
  <updated>2017-04-12T14:52:07+02:00</updated>
  <id>http://rucek.github.io/</id>
  <author>
    <name><![CDATA[Jacek Kunicki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Benchmarking Single-result Query Performance in Slick Using JMH]]></title>
    <link href="http://rucek.github.io/blog/2017/04/12/benchmarking-single-result-query-performance-in-slick-using-jmh/"/>
    <updated>2017-04-12T14:41:12+02:00</updated>
    <id>http://rucek.github.io/blog/2017/04/12/benchmarking-single-result-query-performance-in-slick-using-jmh</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p><a href="http://slick.lightbend.com/">Slick</a> offers a typesafe DSL for accessing your database tables as if they were Scala collections, with a similar API. However, since at the very end the DSL is translated into SQL queries, you sometimes need to be very careful how you use it. In this post you&rsquo;re going to see how a subtle difference in the query DSL can affect the performance significantly.</p>

<h2>Test case</h2>

<p>To illustrate the performance differences, we&rsquo;re going to fetch a single row from a large table defined as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">User</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Users</span><span class="o">(</span><span class="n">tag</span><span class="k">:</span> <span class="kt">Tag</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Table</span><span class="o">[</span><span class="kt">User</span><span class="o">](</span><span class="n">tag</span><span class="o">,</span> <span class="s">&quot;users&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">id</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="s">&quot;id&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">name</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="o">*</span> <span class="k">=</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span> <span class="o">&lt;&gt;</span> <span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="n">tupled</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="n">unapply</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">users</span> <span class="k">=</span> <span class="nc">TableQuery</span><span class="o">[</span><span class="kt">Users</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now consider the two following queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">q1</span> <span class="k">=</span> <span class="n">users</span><span class="o">.</span><span class="n">result</span><span class="o">.</span><span class="n">head</span>
</span><span class='line'><span class="k">val</span> <span class="n">q2</span> <span class="k">=</span> <span class="n">users</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">result</span><span class="o">.</span><span class="n">head</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you tell which of those is going to be faster and why? It turns out that <code>q1</code> is going to fetch all the rows from the table and only then take the first one, while <code>q2</code> is going to add a <code>LIMIT 1</code> clause to the generated SQL query, thus reducing the number of rows fetched to one. The full generated SQL queries are, respectively:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="ss">&quot;id&quot;</span><span class="p">,</span> <span class="ss">&quot;name&quot;</span> <span class="k">from</span> <span class="ss">&quot;users&quot;</span> <span class="c1">-- q1</span>
</span><span class='line'><span class="k">select</span> <span class="ss">&quot;id&quot;</span><span class="p">,</span> <span class="ss">&quot;name&quot;</span> <span class="k">from</span> <span class="ss">&quot;users&quot;</span> <span class="k">limit</span> <span class="mi">1</span> <span class="c1">-- q2</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s rather obvious that <code>q2</code> is going to be much more efficient. But let&rsquo;s check to make sure.</p>

<h2>Benchmarks</h2>

<p>To check the actual performance differences, I used <a href="http://openjdk.java.net/projects/code-tools/jmh/">JMH</a> - the Java micro benchmarking tool - and the <a href="https://github.com/ktoso/sbt-jmh">sbt-jmh plugin</a> (kudos to <a href="http://aludwikowski.blogspot.com/">Andrzej Ludwikowski</a> for recommending it!). JMH basically lets you test any part of your existing code, e.g. a single method - hence the <em>micro</em> in the name. It takes care of warming up the JVM, computing statistics etc. - the entire boilerplate you would like to skip. The benchmarks can either be configured using command-line parameters or with annotations - let&rsquo;s see how to use the latter approach.</p>

<h3>Benchmark parameters</h3>

<p>Firstly, you want to specify two types of queries to benchmark, called <code>take</code>, for the limited variant, and <code>head</code> for the second one. Secondly, you&rsquo;d like to check how the queries behave for different numbers of records in the table - let&rsquo;s assume 10k, 50k, 100k and 500k. The initial banchmark code looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nd">@State</span><span class="o">(</span><span class="nc">Scope</span><span class="o">.</span><span class="nc">Benchmark</span><span class="o">)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SingleResultBenchmark</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Param</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="s">&quot;take&quot;</span><span class="o">,</span> <span class="s">&quot;head&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">queryType</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Param</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="s">&quot;10000&quot;</span><span class="o">,</span> <span class="s">&quot;50000&quot;</span><span class="o">,</span> <span class="s">&quot;100000&quot;</span><span class="o">,</span> <span class="s">&quot;500000&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">numberOfRecords</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is certainly not the best Scala code you could imagine, but this is due to the way JMH works - the benchmarking Java code is generated by the compiler plugin based on our code, i.e. our code is instrumented by JMH. The resulting limitations are:</p>

<ul>
<li>you need to use <code>var</code>s for the parameters, so that the fields don&rsquo;t become <code>final</code> in the Java code,</li>
<li>you need to initialize the fields with some dummy values, which are not going to be used anyway (unfortunately an abstract class won&rsquo;t work),</li>
<li>all the parameters need to be specified as strings, even for numeric parameters like the <code>numberOfRecords</code>.</li>
</ul>


<p>In order to be able to declare fields (i.e. introduce some internal state) on the benchmarked class, you need to annotate it with <code>@State</code> with the scope of your choice - in our case <code>Scope.Benchmark</code> indicates that the state is going to be shared across all the threads within a single benchmark.</p>

<p>When using multiple benchmark parameters, the benchmarks are going to be executed for every possible combination of those, so in our case there are going to be 8 different benchmarks.</p>

<h3>Initialization</h3>

<p>Before running the actual benchmark, we&rsquo;d like to initialize the database (an embedded H2) with the number of records specified by the <code>numberOfRecords</code> parameter. To easily generate an arbitrary number of instances of the <code>User</code> case class, let&rsquo;s use a nice <a href="https://github.com/DanielaSfregola/random-data-generator">random-data-generator</a> library, which leverages <a href="https://github.com/rickynils/scalacheck">ScalaCheck</a> and <a href="https://github.com/alexarchambault/scalacheck-shapeless">scalacheck-shapeless</a> to provide a simple random generation API. The setup part of the benchmarking code looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="nc">Database</span><span class="o">.</span><span class="n">forConfig</span><span class="o">(</span><span class="s">&quot;h2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="n">users</span> <span class="k">=</span> <span class="nc">TableQuery</span><span class="o">[</span><span class="kt">Users</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Setup</span>
</span><span class='line'><span class="k">def</span> <span class="n">prepare</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">schemaExists</span> <span class="k">&lt;-</span> <span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="nc">MTable</span><span class="o">.</span><span class="n">getTables</span><span class="o">(</span><span class="nc">Users</span><span class="o">.</span><span class="nc">TableName</span><span class="o">).</span><span class="n">headOption</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">nonEmpty</span><span class="o">))</span>
</span><span class='line'>    <span class="k">_</span> <span class="k">&lt;-</span> <span class="k">if</span> <span class="o">(</span><span class="n">schemaExists</span><span class="o">)</span> <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">()</span> <span class="k">else</span> <span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="n">schema</span><span class="o">.</span><span class="n">create</span><span class="o">)</span>
</span><span class='line'>    <span class="k">_</span> <span class="k">&lt;-</span> <span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="n">delete</span><span class="o">)</span>
</span><span class='line'>    <span class="k">_</span> <span class="k">&lt;-</span> <span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">users</span> <span class="o">++=</span> <span class="n">random</span><span class="o">[</span><span class="kt">User</span><span class="o">](</span><span class="n">numberOfRecords</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">yield</span> <span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Await</span><span class="o">.</span><span class="n">ready</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">.</span><span class="nc">Inf</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>prepare()</code> method, annotated with <code>@Setup</code> checks if the database schema exists, creates it if it doesn&rsquo;t, then clears the <code>users</code> table and fills it with an arbitrary number of <code>User</code>s.</p>

<h3>The code under test</h3>

<p>This is the most straightforward part, since you just pick one of the queries based on the <code>queryName</code> parameter and execute it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="n">queries</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;take&quot;</span> <span class="o">-&gt;</span> <span class="n">users</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">result</span><span class="o">.</span><span class="n">head</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;head&quot;</span> <span class="o">-&gt;</span> <span class="n">users</span><span class="o">.</span><span class="n">result</span><span class="o">.</span><span class="n">head</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Benchmark</span>
</span><span class='line'><span class="nd">@BenchmarkMode</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="nc">Mode</span><span class="o">.</span><span class="nc">AverageTime</span><span class="o">))</span>
</span><span class='line'><span class="k">def</span> <span class="n">query</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">ready</span><span class="o">(</span><span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">queries</span><span class="o">(</span><span class="n">queryType</span><span class="o">)),</span> <span class="nc">Duration</span><span class="o">.</span><span class="nc">Inf</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the <code>query()</code> method is annotated with <code>@Benchmark</code> to indicate that this is the actual part of the application that you want to benchmark, and with <code>BenchmarkMode</code> to indicate that you want to measure the execution time (the default mode is to measure the throughput).</p>

<h3>Results</h3>

<p>Now you&rsquo;re ready to run the benchmarks, which is as simple as:</p>

<pre><code class="``bash">  sbt jmh:run
</code></pre>

<p>Please note that with the default parameters there will be 10 forks for every parameter combination, each fork consisting of 20 warm-up iterations and 20 actual ones, which leads to quite a number of executions in total and takes some time to complete. To run fewer forks and thus reduce the time, you can e.g. add a command-line parameter:</p>

<pre><code class="``bash">  sbt "jmh:run -f 1"
</code></pre>

<p>which reduces the number of forks to one.</p>

<p>Below are the results of running the (lengthy) benchmark with the default parameters on a MacBook with 2,3 GHz Intel Core i7 and 16 GB of RAM under macOS 10.2.3 (Sierra):</p>

<pre><code class="``">  (numberOfRecords)  (queryType)  Mode  Cnt  Score    Error  Units
              10000         take  avgt  200  0.001 ±  0.001   s/op
              10000         head  avgt  200  0.008 ±  0.001   s/op
              50000         take  avgt  200  0.001 ±  0.001   s/op
              50000         head  avgt  200  0.035 ±  0.003   s/op
             100000         take  avgt  200  0.001 ±  0.001   s/op
             100000         head  avgt  200  0.064 ±  0.005   s/op
             500000         take  avgt  200  0.001 ±  0.001   s/op
             500000         head  avgt  200  3.571 ±  0.168   s/op
</code></pre>

<p>They certainly prove that the query with <code>take(1)</code> is much faster - you could even say that its performance is constant with the growing number of records, while the non-limited query tends to get slower when the record count increases (which is expected).</p>

<h2>Summary</h2>

<p>Although the Slick API resembles Scala collections a lot, you always need to remember that there&rsquo;s a database underneath and thus wisely choose how you use the API. In case you&rsquo;re not sure which of several approaches is faster, you can have a look at the actual SQL generated by Slick. When just looking at the queries is not sufficient, you can use a micro benchamrking tool like JMH to verify your guesses.</p>

<p>A full working example with the code presented above is available <a href="https://github.com/rucek/slick-single-result-performance">on GitHub</a>. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing a Custom Akka Streams Graph Stage]]></title>
    <link href="http://rucek.github.io/blog/2016/07/20/implementing-a-custom-akka-streams-graph-stage/"/>
    <updated>2016-07-20T11:39:00+02:00</updated>
    <id>http://rucek.github.io/blog/2016/07/20/implementing-a-custom-akka-streams-graph-stage</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p><a href="http://doc.akka.io/docs/akka/2.4.8/scala/stream/index.html">Akka Streams</a> offers a number of predefined building blocks for your graphs (i.e. processing pipelines). Should you need a non-standard solution, there&rsquo;s an API to help you write the custom part of the graph. In this post I&rsquo;m going to walk you through implementing your own graph stage.</p>

<h2>Recap: Akka Streams concepts</h2>

<p>Since the stream processing terminology heavily depends on the library/toolkit you are using, here is a quick reminder of what things are called in the Akka Streams world: the producer is called a <code>Source</code>, the consumer - a <code>Sink</code> and the processing stages are <code>Flow</code>s. Each of those is a specialized graph stage whose type is determined by the number of inputs and outputs - a <code>Source</code> has no inputs and a single output, a <code>Sink</code> has a single input and no outputs, a <code>Flow</code> has a single input and a single output.</p>

<p>In terms of the types, each part of the graph is a <code>GraphStage</code> with a given <code>Shape</code> - with the most basic shapes being: <code>SourceShape</code>, <code>FlowShape</code> and <code>SinkShape</code>. There are also other more complex <code>Shape</code>s available, used for modelling such concepts as broadcasting or merging elements of the stream, but those are out of the scope of this post.</p>

<h2>The use case</h2>

<p>Let&rsquo;s say that having a stream of elements of type <code>E</code> you want to observe their arbitrary property of type <code>P</code>, accumulate the elements as long as the property remains unchanged and only emit an <code>immutable.Seq[E]</code> of accumulated elements when the property changes. In a real-life example the elements can be e.g. lines in a CSV file which you would like to group by a given field.</p>

<h2>Anatomy of a custom graph stage</h2>

<p>A custom graph stage is nothing more than an implementation of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">GraphStage</span><span class="o">[</span><span class="kt">S</span> <span class="k">&lt;:</span> <span class="kt">Shape</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our example the stage is going to have a single input and a single output, which makes it a <code>Flow</code> whose shape is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">FlowShape</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">immutable.Seq</span><span class="o">[</span><span class="kt">E</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The definition of the stage thus becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">class</span> <span class="nc">AccumulateWhileUnchanged</span><span class="o">[</span><span class="kt">E</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">GraphStage</span><span class="o">[</span><span class="kt">FlowShape</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">immutable.Seq</span><span class="o">[</span><span class="kt">E</span><span class="o">]]]</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you just need to implement two methods</p>

<ul>
<li><code>def shape: FlowShape</code> - to provide a concrete shape</li>
<li><code>def createLogic(inheritedAttributes: Attributes): GraphStageLogic</code> - to provide your custom logic of the stage</li>
</ul>


<p>Let&rsquo;s now dig into the details of those two methods.</p>

<h2>Implementing a custom graph stage</h2>

<h3>Providing a custom <code>FlowShape</code></h3>

<p>A <code>FlowShape</code> simply consists of an <code>Inlet</code> and an <code>Outlet</code>, i.e. the <em>ports</em> of the stage. To define a port, you need to provide its name and data type. After defining the ports, the stage implementation becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">class</span> <span class="nc">AccumulateWhileUnchanged</span><span class="o">[</span><span class="kt">E</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">GraphStage</span><span class="o">[</span><span class="kt">FlowShape</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">immutable.Seq</span><span class="o">[</span><span class="kt">E</span><span class="o">]]]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="nc">Inlet</span><span class="o">[</span><span class="kt">E</span><span class="o">](</span><span class="s">&quot;AccumulateWhileUnchanged.in&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">out</span> <span class="k">=</span> <span class="nc">Outlet</span><span class="o">[</span><span class="kt">immutable.Seq</span><span class="o">[</span><span class="kt">E</span><span class="o">]](</span><span class="s">&quot;AccumulateWhileUnchanged.out&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">shape</span> <span class="k">=</span> <span class="nc">FlowShape</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Providing a custom <code>GraphStageLogic</code></h3>

<p>Since the <code>GraphStage</code>s are meant to be reusable, it is crucial to keep them immutable, i.e. not to put any mutable state inside them. On the other hand, however, the stage we are implementing here is definitely stateful - its state consists of the accumulated elements. Here is where the <code>GraphStageLogic</code> comes to the rescue - since a new instance of it is created for every materialization of the flow, it is the one and only place to keep the mutable state in.</p>

<p>Within the <code>GraphStageLogic</code>, apart from keeping the mutable state, you may also define handlers for the <code>onPush()</code> and <code>onPull()</code> events. The <code>onPush()</code> event occurs when a new element from the upstream is available and can be acquired using <code>grab()</code>. The <code>onPull()</code>, on the other hand, occurs when the downstream is ready to accept a new element which can be sent with <code>push()</code>.</p>

<p>So here is what a draft implementation of the <code>GraphStageLogic</code> with the handlers is going to look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">override</span> <span class="k">def</span> <span class="n">createLogic</span><span class="o">(</span><span class="n">inheritedAttributes</span><span class="k">:</span> <span class="kt">Attributes</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">GraphStageLogic</span><span class="o">(</span><span class="n">shape</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setHandlers</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InHandler</span> <span class="k">with</span> <span class="nc">OutHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onPush</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onPull</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To implement the actual accumulating logic, you need to:</p>

<ul>
<li>know how to extract the observed property of the incoming elements,</li>
<li>keep track of the incoming elements in some kind of a buffer.</li>
</ul>


<h4>Extracting the observed property</h4>

<p>The easiest way to know which property to observe is to have the user provide a function which extracts this property - so you need to adjust the stage definition a bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">class</span> <span class="nc">AccumulateWhileUnchanged</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">P</span><span class="o">](</span><span class="n">propertyExtractor</span><span class="k">:</span> <span class="kt">E</span> <span class="o">=&gt;</span> <span class="n">P</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">GraphStage</span><span class="o">[</span><span class="kt">FlowShape</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">immutable.Seq</span><span class="o">[</span><span class="kt">E</span><span class="o">]]]</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Keeping track of the incoming elements</h4>

<p>The internal state of your stage logic will consist of:</p>

<ul>
<li>an <code>Option[P]</code> to keep the current value of the observed property (empty until the first element arrives),</li>
<li>a <code>Vector[E]</code> to accumulate the elements (cleared when the observed property changes).</li>
</ul>


<p>When the next input element arrives (in <code>onPush()</code>), you want to extract its property and check if it differs from the current value. If there is no current value yet or the values are equal, you add the element to the buffer and <code>pull()</code> the input, otherwise you <code>push()</code> the buffer contents downstream and clear the buffer. When the downstream requests a new sequence of elements with <code>onPull()</code>, you just need to <code>pull()</code> the input in order to indicate, that the stage is ready to accept a new incoming element.</p>

<p>An additional case that you need to handle is when the upstream has completed (i.e. no more input elements are going to arrive or there was an error in the upstream) - then you need to push the <em>last</em> elements from the buffer (unless it is empty) and complete the stage afterwards. Moreover, to be nice to memory and the GC, you may wish to clear the buffer after the stage is complete.</p>

<p>The full implementation of the above concepts is going to be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">class</span> <span class="nc">AccumulateWhileUnchanged</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">P</span><span class="o">](</span><span class="n">propertyExtractor</span><span class="k">:</span> <span class="kt">E</span> <span class="o">=&gt;</span> <span class="n">P</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">GraphStage</span><span class="o">[</span><span class="kt">FlowShape</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">immutable.Seq</span><span class="o">[</span><span class="kt">E</span><span class="o">]]]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="nc">Inlet</span><span class="o">[</span><span class="kt">E</span><span class="o">](</span><span class="s">&quot;AccumulateWhileUnchanged.in&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">out</span> <span class="k">=</span> <span class="nc">Outlet</span><span class="o">[</span><span class="kt">immutable.Seq</span><span class="o">[</span><span class="kt">E</span><span class="o">]](</span><span class="s">&quot;AccumulateWhileUnchanged.out&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">shape</span> <span class="k">=</span> <span class="nc">FlowShape</span><span class="o">.</span><span class="n">of</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">createLogic</span><span class="o">(</span><span class="n">inheritedAttributes</span><span class="k">:</span> <span class="kt">Attributes</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">GraphStageLogic</span><span class="o">(</span><span class="n">shape</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="n">currentState</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">P</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="n">buffer</span> <span class="k">=</span> <span class="nc">Vector</span><span class="o">.</span><span class="n">newBuilder</span><span class="o">[</span><span class="kt">E</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setHandlers</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InHandler</span> <span class="k">with</span> <span class="nc">OutHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onPush</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">nextElement</span> <span class="k">=</span> <span class="n">grab</span><span class="o">(</span><span class="n">in</span><span class="o">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">nextState</span> <span class="k">=</span> <span class="n">propertyExtractor</span><span class="o">(</span><span class="n">nextElement</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentState</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">||</span> <span class="n">currentState</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">nextState</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">buffer</span> <span class="o">+=</span> <span class="n">nextElement</span>
</span><span class='line'>          <span class="n">pull</span><span class="o">(</span><span class="n">in</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">buffer</span><span class="o">.</span><span class="n">result</span><span class="o">()</span>
</span><span class='line'>          <span class="n">buffer</span><span class="o">.</span><span class="n">clear</span><span class="o">()</span>
</span><span class='line'>          <span class="n">buffer</span> <span class="o">+=</span> <span class="n">nextElement</span>
</span><span class='line'>          <span class="n">push</span><span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">result</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">currentState</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">nextState</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onPull</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">pull</span><span class="o">(</span><span class="n">in</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onUpstreamFinish</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">buffer</span><span class="o">.</span><span class="n">result</span><span class="o">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="n">nonEmpty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">emit</span><span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">result</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">completeStage</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">postStop</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">buffer</span><span class="o">.</span><span class="n">clear</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are wondering why <code>emit()</code> is used instead of <code>push()</code> in <code>onUsptreamFinish()</code> (line 40), the answer is - because it is not possible to push a port which has not been pulled. Once the upstream is finished, the buffer may still contain the final group of accumulated elements - but chances are that the output port has not been pulled after the previous group was pushed. You want, however, to send the final group anyway - that is where <code>emit()</code> comes to the rescue - when it detects that the output port is not available (i.e. cannot be pushed), it replaces the <code>OutHandler</code> with a temporary one and only then does it execute the actual <code>push()</code>.</p>

<p>Now you are ready to use the custom stage in your application with <code>.via(new AccumulateWhileUnchanged(...))</code>. For example, having a simple domain like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Element</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">SampleElements</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">E11</span> <span class="k">=</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">E21</span> <span class="k">=</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">E31</span> <span class="k">=</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">E42</span> <span class="k">=</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">E52</span> <span class="k">=</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">E63</span> <span class="k">=</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="nc">Ones</span> <span class="k">=</span> <span class="n">immutable</span><span class="o">.</span><span class="nc">Seq</span><span class="o">(</span><span class="n">E11</span><span class="o">,</span> <span class="n">E21</span><span class="o">,</span> <span class="n">E31</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">Twos</span> <span class="k">=</span> <span class="n">immutable</span><span class="o">.</span><span class="nc">Seq</span><span class="o">(</span><span class="n">E42</span><span class="o">,</span> <span class="n">E52</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">Threes</span> <span class="k">=</span> <span class="n">immutable</span><span class="o">.</span><span class="nc">Seq</span><span class="o">(</span><span class="n">E63</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="nc">All</span> <span class="k">=</span> <span class="nc">Ones</span> <span class="o">++</span> <span class="nc">Twos</span> <span class="o">++</span> <span class="nc">Threes</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>when you run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Source</span><span class="o">(</span><span class="nc">SampleElements</span><span class="o">.</span><span class="nc">All</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">via</span><span class="o">(</span><span class="k">new</span> <span class="nc">AccumulateWhileUnchanged</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">value</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="n">runWith</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>the output will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Vector</span><span class="o">(</span><span class="nc">Element</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">),</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'><span class="nc">Vector</span><span class="o">(</span><span class="nc">Element</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Element</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span><span class="o">))</span>
</span><span class='line'><span class="nc">Vector</span><span class="o">(</span><span class="nc">Element</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span><span class="mi">3</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing</h2>

<p>There is a number of useful utilities to help you test your custom graph stages. With the help of those and using the <code>SampleElements</code> helper defined above, a sample test case for the above stage looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="s">&quot;AccumulateWhileUnchanged&quot;</span> <span class="n">should</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;emit accumulated elements when the given property changes&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="n">sink</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="nc">SampleElements</span><span class="o">.</span><span class="nc">All</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">via</span><span class="o">(</span><span class="nc">AccumulateWhileUnchanged</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">value</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">toMat</span><span class="o">(</span><span class="nc">TestSink</span><span class="o">.</span><span class="n">probe</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">both</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="n">request</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="n">expectNext</span><span class="o">(</span><span class="nc">SampleElements</span><span class="o">.</span><span class="nc">Ones</span><span class="o">,</span> <span class="nc">SampleElements</span><span class="o">.</span><span class="nc">Twos</span><span class="o">,</span> <span class="nc">SampleElements</span><span class="o">.</span><span class="nc">Threes</span><span class="o">)</span>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="n">expectComplete</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>TestSink.probe</code> (line 6) creates an instance of <code>akka.stream.testkit.TestSubscriber.Probe</code>, which offers methods such as <code>expectNext()</code> or <code>expectComplete()</code> (lines 10-11) to verify whether the stage behaves correctly.</p>

<h2>Summary</h2>

<p>After diligently going through this post, you should understand how the <code>GraphStage</code> API is designed and how to use it to implement your own graph stage.</p>

<p>For even more details, please refer to the <a href="http://doc.akka.io/docs/akka/2.4.8/scala/stream/stream-customize.html">Custom stream processing</a> section of the Akka Streams documentation.</p>

<p>If you find the <code>AccumulateWhileUnchanged</code> stage useful, there is no need to rewrite it from scratch, since it is a part of <a href="https://github.com/akka/akka-stream-contrib">akka-stream-contrib</a> - a project which groups various add-ons to Akka Streams core.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Entrypoints in Docker]]></title>
    <link href="http://rucek.github.io/blog/2016/02/12/multiple-entrypoints-in-docker/"/>
    <updated>2016-02-12T21:35:00+01:00</updated>
    <id>http://rucek.github.io/blog/2016/02/12/multiple-entrypoints-in-docker</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>When using <a href="https://www.docker.com/">Docker</a> containers for a number of building blocks of your application, the recommended approach is to run a separate container for every building block, so that the components are well separated. And the <a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#run-only-one-process-per-container">Docker best practices</a> suggest running a single process per container.</p>

<p>However, you may imagine a scenario in which it&rsquo;s reasonable to run multiple services in a single container (an example will follow). Then the question arises how to run those services using a single <code>ENTRYPOINT</code> command in the <code>Dockerfile</code>.</p>

<h2>Example scenario</h2>

<p>Let&rsquo;s say your application communicates with an external service through an SSH tunnel (or a VPN, or anything more than a direct connection - you name it). Then, there is a number of ways to set up the tunnel along with the application itself:</p>

<ol>
<li><p>Setup the tunnel on the host, run the container with the <code>host</code> network mode (i.e. with the <code>--net=host</code> switch) - which means that the container has no separate network stack but uses the host&rsquo;s one, so it can just access the tunnel.</p></li>
<li><p>Setup the tunnel on the host, run the container in the default network mode (i.e. <code>bridge</code>) and somehow access the tunnel on the host from the container. Somehow here means e.g. using the <code>--add-host</code> switch (with the host&rsquo;s IP) when running the container, which adds an <code>/etc/hosts</code> entry in the container (see <a href="https://docs.docker.com/engine/reference/run/#managing-etc-hosts">the docs</a> for details). Or you can try <a href="http://stackoverflow.com/questions/22944631/how-to-get-the-ip-address-of-the-docker-host-from-inside-a-docker-container">some other hacks</a> as well.</p></li>
<li><p>Run the tunnel in the container.</p></li>
</ol>


<p>Now, the problem with options 1 and 2 is that you lose the <em>run anywhere</em> part of the Docker philosophy, since <em>anywhere</em> becomes limited to <em>anywhere-with-an-ssh-tunnel</em>. Plus, your infrastructure is no more immutable, since by setting up the tunnel you just made a change to the host. A change about which you need to remember every time you run the container somewhere else.</p>

<p>Therefore, option 3 seems to be the way to go. But since Docker allows only a single <code>ENTRYPOINT</code> (to be precise, only the last <code>ENTRYPOINT</code> in the <code>Dockerfile</code> has an effect), you need to find a way to run multiple processes (the tunnel and the application) with a single command. Let&rsquo;s see how you can do it.</p>

<h2>Solution</h2>

<p>The simplest idea is to create a shell script to run the required processes and use that script as the <code>ENTRYPOINT</code>. But I wouldn&rsquo;t write a blogpost about writing a shell script, would I? Instead, let&rsquo;s dig into the recommended technique which uses <a href="http://supervisord.org/"><em>supervisord</em></a> - a process control system.</p>

<p>In the big picture, <em>supervisord</em> is a tool which lets you run multiple programs at once from a single place. The benefits over a plain old shell script are the numerous configuration and monitoring options. Here I&rsquo;m going to cover only the basic usage, which is just enough for our scenario - feel free to explore the more advanced stuff yourself.</p>

<p>To use <em>supervisord</em>, you first need to install it, preferably using a package manager. In an Ubuntu/Debian-based container you need to add the following to the <code>Dockerfile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUN apt-get update && apt-get install -y supervisor</span></code></pre></td></tr></table></div></figure>


<p>Since in this example you&rsquo;re also going to need an SSH tunnel, let&rsquo;s install the SSH client too:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUN apt-get update && apt-get install -y supervisor openssh-client</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> always remember to combine <code>apt-get update</code> and <code>apt-get install</code> into a single command in order to get the latest package versions - see <a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#apt-get">the docs</a> for details.</p>

<p>Now that <em>supervisord</em> and the SSH client are installed, it&rsquo;s time for some configuration. Let&rsquo;s assume that your application&rsquo;s entrypoint is <code>/opt/myapp/bin/myapp</code>. The <em>supervisord</em> configuration will then be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[supervisord]</span>
</span><span class='line'><span class="na">nodaemon</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'><span class="na">logfile</span><span class="o">=</span><span class="s">/var/log/supervisord/supervisord.log</span>
</span><span class='line'><span class="na">childlogdir</span><span class="o">=</span><span class="s">/var/log/myapp</span>
</span><span class='line'>
</span><span class='line'><span class="k">[program:ssh]</span>
</span><span class='line'><span class="na">command</span><span class="o">=</span><span class="s">ssh -N -L8080:localhost:8080 user@example.com</span>
</span><span class='line'>
</span><span class='line'><span class="k">[program:myapp]</span>
</span><span class='line'><span class="na">stdout_logfile</span><span class="o">=</span><span class="s">/dev/stdout</span>
</span><span class='line'><span class="na">stdout_logfile_maxbytes</span><span class="o">=</span><span class="s">0</span>
</span><span class='line'><span class="na">command</span><span class="o">=</span><span class="s">/opt/myapp/bin/myapp --some-configuration</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> If you put the congfiguration file in the defult location inside the container, i.e. <code>/etc/supervisor/conf.d/supervisord.conf</code>, it will automatically be picked up by <em>supervisord</em>. However, for the sake of this example, let&rsquo;s assume you chose a custom location inside the container, e.g. <code>/etc/myapp/supervisord.conf</code>.</p>

<p>The <code>[supervisord]</code> section configures the main <em>supervisord</em> process. The <code>nodaemon=true</code> indicates that the process should stay in the foreground (as the container would be terminated otherwise). Additionally, you can specify a log file for <em>supervisord</em> logs (with the <code>logfile</code> parameter) and a directory for the messages captured from the <code>stdout</code> and <code>stderr</code> of the child processes (here: <code>ssh</code> and <code>myapp</code>) - with the <code>childlogdir</code> parameter.</p>

<p>Next come the configurations of your processes that will run in the container.</p>

<p>For <code>ssh</code> you define your arbitrary port forwarding with the <code>-L</code> switch. Plus you can use the <code>-N</code> flag, which means that no remote command would be executed - which is <em>useful for just forwarding ports</em>, according to the SSH man page.</p>

<p>In <code>myapp</code> configuration the <code>stdout_logfile</code> parameter indicates where the <code>stdout</code> of the process should go - in this case it goes to the container&rsquo;s <code>stdout</code>. A log rotation policy can be configured  with <code>stdout_logfile_maxbytes</code>, where a value of zero means no rotation. The <code>command</code> parameter is self-explanatory - this is the full command to run your application.</p>

<p>Having configured <em>supervisord</em>, the last step is to actually run it when the container starts - with the <code>ENTRYPOINT</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">ENTRYPOINT</span> <span class="k">[&quot;/usr/bin/supervisord&quot;, &quot;-c&quot;, &quot;/etc/myapp/supervisord.conf&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see that we use the <code>-c</code> switch to provide the path to a custom configuration file. This wouldn&rsquo;t be necessary if the configuration was in <code>/etc/supervisor/conf.d/supervisord.conf</code>.</p>

<p>After running the container you should see a few logs from <em>supervisord</em>, indicating that both the daemon and your processes have been started:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">2016-02-09</span> <span class="err">16:47:13,949</span> <span class="err">CRIT</span> <span class="err">Supervisor</span> <span class="err">running</span> <span class="err">as</span> <span class="err">root</span> <span class="err">(no</span> <span class="err">user</span> <span class="err">in</span> <span class="err">config</span> <span class="err">file)</span>
</span><span class='line'><span class="err">2016-02-09</span> <span class="err">16:47:13,951</span> <span class="err">INFO</span> <span class="err">supervisord</span> <span class="err">started</span> <span class="err">with</span> <span class="err">pid</span> <span class="err">1</span>
</span><span class='line'><span class="err">2016-02-09</span> <span class="err">16:47:14,953</span> <span class="err">INFO</span> <span class="err">spawned:</span> <span class="err">&#39;ssh&#39;</span> <span class="err">with</span> <span class="err">pid</span> <span class="err">8</span>
</span><span class='line'><span class="err">2016-02-09</span> <span class="err">16:47:14,954</span> <span class="err">INFO</span> <span class="err">spawned:</span> <span class="err">&#39;myapp&#39;</span> <span class="err">with</span> <span class="err">pid</span> <span class="err">9</span>
</span><span class='line'><span class="err">2016-02-09</span> <span class="err">16:47:16,754</span> <span class="err">INFO</span> <span class="err">success:</span> <span class="err">ssh</span> <span class="err">entered</span> <span class="err">RUNNING</span> <span class="err">state,</span> <span class="err">process</span> <span class="err">has</span> <span class="err">stayed</span> <span class="err">up</span> <span class="err">for</span> <span class="err">&gt;</span> <span class="err">than</span> <span class="err">1</span> <span class="err">seconds</span> <span class="err">(startsecs)</span>
</span><span class='line'><span class="err">2016-02-09</span> <span class="err">16:47:16,755</span> <span class="err">INFO</span> <span class="err">success:</span> <span class="err">myapp</span> <span class="err">entered</span> <span class="err">RUNNING</span> <span class="err">state,</span> <span class="err">process</span> <span class="err">has</span> <span class="err">stayed</span> <span class="err">up</span> <span class="err">for</span> <span class="err">&gt;</span> <span class="err">than</span> <span class="err">1</span> <span class="err">seconds</span> <span class="err">(startsecs)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>You have just learned the recommended way to run multiple processes in a Docker container - if you know what you&rsquo;re doing, i.e. you really need more than one process in your container. Please refer to <a href="http://supervisord.org/"><em>supervisord</em> docs</a> if your scenario is anything more than this basic one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSL Client Certificates on the JVM]]></title>
    <link href="http://rucek.github.io/blog/2015/09/10/ssl-client-certificates-on-the-jvm/"/>
    <updated>2015-09-10T12:26:31+02:00</updated>
    <id>http://rucek.github.io/blog/2015/09/10/ssl-client-certificates-on-the-jvm</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>The most common scenario when using SSL/TLS is the <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Basic_TLS_handshake">basic handshake</a> where the server is the only party that is authenticated with its certificate - the client remains unauthenticated. We may then connect to the server just knowing its address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl s_client -connect google.com:443
</span></code></pre></td></tr></table></div></figure>


<p>In this post I&rsquo;m going to deal with a less popular scenario - the <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Client-authenticated_TLS_handshake">client-authenticated handshake</a> - in which the client is required to present its certificate as well and use its private key.</p>

<p>Let&rsquo;s assume our secure server is <code>secure.server.com:443</code> and we already have the client&rsquo;s certificate in <code>client.crt</code> and the client&rsquo;s private key in <code>client.key</code>, both of them in the <a href="https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail#Sample_PEM_format_x_509_cert">PEM format</a>. We can again use <code>s_client</code> to test the connection, but this time we need to present the certificate and private key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl s_client -connect secure.server.com:443 -cert client.crt -key client.key
</span></code></pre></td></tr></table></div></figure>


<p>However, things get a little bit less straightforward on the JVM. Any secure HTTP connection on the JVM, no matter which library you use, boils down to using the <code>javax.net.ssl.HttpsURLConnection</code>, which is a part of the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html">Java Secure Socket Extension (JSSE)</a>.</p>

<h2>JSSE, key stores and trust stores</h2>

<p>Among other stuff, JSSE has a concept of <em>key stores</em> and <em>trust stores</em>. The former are containers for keys/certificates presented to the server, the latter let the JVM know whether a given server certificate is signed by a trusted <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Certificate_Authorities">Certificate Authority (CA)</a>. The default format for both stores is JKS (which stands for <em>Java keystore</em>), but JSSE is also capable of reading the <a href="https://en.wikipedia.org/wiki/PKCS_12">PKCS #12</a> format.</p>

<h3>Custom key store</h3>

<p>As you may already have guessed, in order to use the aforementioned client&rsquo;s certificate and key, we need to store them in a keystore. We&rsquo;ll go for the PKCS #12 format and use <code>openssl</code> to do the necessary conversions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl pkcs12 -export -out keystore.p12 -in client.crt -inkey client.key
</span></code></pre></td></tr></table></div></figure>


<p>Please make sure <strong>not</strong> to provide an empty password when <code>openssl</code> prompts you - not only is it unreasonable from the security point of view, but it will also make mysterious <code>NullPointerException</code>s fly around when you attempt to use a key store which has an empty password.</p>

<p>In order for the JVM to use the custom key store, you need to set the following system properties:</p>

<pre><code class="``">  -Djavax.net.ssl.keyStore=keystore.p12
  -Djavax.net.ssl.keyStoreType=pkcs12
  -Djavax.net.ssl.keyStorePassword=&lt;password&gt;
</code></pre>

<p>where <code>&lt;password&gt;</code> is the key store password you chose when prompted by <code>openssl</code>. You may of course set those properties at runtime by calling <code>System.getProperties().put(key, value)</code> (in Java) or <code>sys.props += key -&gt; value</code> (in Scala).</p>

<p>Provided that the certificate of <code>secure.server.com</code> is signed by a trusted CA, the steps so far are enough to get up and running. However, if the server&rsquo;s certificate is a self-signed one, you need an additional step, which is telling JSSE to trust the self-signed certificate.</p>

<h3>Custom trust store</h3>

<p>We&rsquo;re going to achieve this by creating a trust store containing the certificate of the CA (the untrusted one) which signed the server&rsquo;s certificate. But where do we take the CA&rsquo;s certificate from? Once again <code>openssl</code> comes to the rescue. After executing</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl s_client -connect secure.server.com:443 -showcerts &lt; /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>you&rsquo;re going to see - among other output - a number of certificates in the PEM format, i.e. something like:</p>

<pre><code class="``">  -----BEGIN CERTIFICATE-----
  (some Base64 content)
  -----END CERTIFICATE-----
</code></pre>

<p>You&rsquo;re interested in the last certificate in the sequence, which is going to be the CA&rsquo;s certificate - you need to save it (including the <code>BEGIN/END CERTIFICATE</code> lines) into a file, e.g. <code>ca.crt</code>.</p>

<p>Now it&rsquo;s time to decide whether you want to import the CA&rsquo;s certificate into the global JSSE trust store or just to create a local trust store with a single certificate. The global trust store contains certificates of trusted CAs like VeriSign/Symantec, so it&rsquo;s necessary if you want to connect to most of the well-known servers like <code>google.com</code>. The tricky part is that when you tell JSSE to use a custom trust store, it won&rsquo;t be using the global one anymore, so you will only be able to connect to servers whose certificates are signed by the CA in the custom trust store.</p>

<p>Therefore, you have three options to choose from:</p>

<ol>
<li><p>Extend the global trust store by importing the untrusted CA&rsquo;s certificate into it. This is the easiest solution, but you need to remember that it will affect all applications running on the given JVM, i.e. all of them will trust certificates signed by the CA in question.</p></li>
<li><p>Make a copy of the global trust store and import the CA&rsquo;s certificate into the copy, then use the copy as a custom trust store in your application. In this case your application will be able to connect both to the well-known servers and to <code>secure.server.com</code>.</p></li>
<li><p>Create a custom trust store with only the certificate of the untrusted CA. Your application is then only going to trust certificated signed by the selected CA and it won&rsquo;t be able to make a secure connection to a well-known server like <code>google.com</code>.</p></li>
</ol>


<p>Let&rsquo;s now explore the above options in more detail.</p>

<h4>1. Extending the global trust store</h4>

<p>The global trust store is located in <code>$JAVA_HOME/jre/lib/security/cacerts</code>. To import the <code>ca.crt</code> into the trust store, we&rsquo;re going to use JDK&rsquo;s <code>keytool</code> utility (if you have <code>java</code> in the <code>PATH</code>, you should have <code>keytool</code> as well):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>keytool -import -file ca.crt -alias <span class="s2">&quot;CA alias of your choice&quot;</span> <span class="se">\</span>
</span><span class='line'>        -keystore <span class="nv">$JAVA_HOME</span>/jre/lib/security/cacerts
</span></code></pre></td></tr></table></div></figure>


<p>Note: the default password for the global trust store is <code>changeit</code> (yes, not the most secure one).</p>

<p>Since the global trust store is used by default in a JVM application, no further configuration is needed.</p>

<h4>2. Using an extended copy of the global trust store</h4>

<p>First simply create a copy of the global trust store:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp <span class="nv">$JAVA_HOME</span>/jre/lib/security/cacerts my-cacerts.jks
</span></code></pre></td></tr></table></div></figure>


<p>Then import <code>ca.crt</code> like in the previous case (again, the default password is <code>changeit</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>keytool -import -file ca.crt -alias <span class="s2">&quot;CA alias of your choice&quot;</span> -keystore my-cacerts.jks
</span></code></pre></td></tr></table></div></figure>


<p>Finally, you need to tell the JVM to use the custom trust store by setting the following system properties:</p>

<pre><code class="``">  -Djavax.net.ssl.trustStore=my-cacerts.jks
  -Djavax.net.ssl.trustStoreType=JKS
  -Djavax.net.ssl.trustStorePassword=changeit
</code></pre>

<h4>3. Using a single-certificate trust store</h4>

<p>The first step here is to create a new key store (yes, a trust store is a actually a key store):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>keytool -genkey -dname <span class="s2">&quot;cn=CLIENT&quot;</span> -alias truststorekey -keyalg RSA -keystore truststore.jks
</span></code></pre></td></tr></table></div></figure>


<p>The <code>cn</code> value in the <code>dname</code> parameter is an arbitrary name and doesn&rsquo;t really matter. The same applies to the <code>alias</code> parameter. And again, please remember not to set an empty password.</p>

<p>Then you import <code>ca.crt</code> into the newly created trust store:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>keytool -import -file ca.crt -alias <span class="s2">&quot;CA alias of your choice&quot;</span> -keystore truststore.jks
</span></code></pre></td></tr></table></div></figure>


<p>Finally, you need to tell the JVM to use the custom trust store by setting the following system properties:</p>

<pre><code class="``">  -Djavax.net.ssl.trustStore=truststore.jks
  -Djavax.net.ssl.trustStoreType=JKS
  -Djavax.net.ssl.trustStorePassword=&lt;password&gt;
</code></pre>

<p>where <code>&lt;password&gt;</code> is the password you chose when creating your custom trust store.</p>

<h2>Summary</h2>

<p>Hopefully, this post has shed some light on the not-so-common scenario of a secure JVM client authenticating itself with a certificate and private key. You should now be able to seamlessly implement this kind of authentication in your JVM application.</p>
]]></content>
  </entry>
  
</feed>
